{"version":3,"sources":["pages/es/promise/index.tsx","config/index.ts","pages/other/qa/index.tsx","layout/router-config.ts","layout/App.tsx","serviceWorker.js","index.tsx"],"names":["usePromise","console","info","Promise","resolve","reject","timeoutInstance","setTimeout","moment","format","YPromise","domain","list","QA","onClick","window","open","map","item","index","key","es_config","path","name","component","react_config","css_config","other_config","Sider","Layout","Content","Header","SubMenu","Menu","withRouter","props","useState","collapsed","toggle","pathname","location","style","width","height","trigger","collapsible","className","theme","mode","defaultSelectedKeys","icon","FileOutlined","title","Item","to","TeamOutlined","UserOutlined","React","createElement","MenuUnfoldOutlined","MenuFoldOutlined","color","cursor","margin","padding","minHeight","exact","from","Boolean","hostname","match","ReactDOM","render","StrictMode","locale","zh_CN","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wWAsBMA,EAAa,WACfC,QAAQC,KAAK,wCACK,IAAIC,SAAQ,SAACC,EAASC,GACxCJ,QAAQC,KAAK,0BACb,IAAMI,EAAkBC,YAAW,WAEjCN,QAAQC,KAAKM,MAASC,OAAO,UAC7BR,QAAQC,KAAK,yBACZ,KACHD,QAAQC,KAAKI,OAOFI,EA1BoC,WAEjD,OADAT,QAAQC,KAAK,oCAEX,oCACGF,M,SChBMW,EAAS,8DCKhBC,EAAO,CACX,wJAuBaC,EAhBe,WAE5B,OACE,6BACE,8JACA,qEAAY,4BAAQC,QAJN,WAAQC,OAAOC,KAAP,UAAeL,EAAf,0BAIV,iBACZ,kBAAC,IAAD,MAEEC,EAAKK,KAAI,SAACC,EAAMC,GACd,OAAO,yBAAKC,IAAKF,GAAOC,EAAQ,EAAzB,IAA6BD,QCbjCG,EAA4B,CACvC,CAAEC,KAAK,GAAD,OANe,MAMf,YAAwBC,KAAM,UAAWC,UAAWrB,IAG/CsB,EAA+B,CAC1C,CAAEH,KAAK,GAAD,OATkB,SASlB,YAA2BC,KAAM,UAAWC,UAAWrB,IAGlDuB,EAA6B,CACxC,CAAEJ,KAAK,GAAD,OAZgB,OAYhB,YAAyBC,KAAM,UAAWC,UAAWrB,IAGhDwB,EAA+B,CAC1C,CAAEL,KAAK,GAAD,OAfkB,SAelB,OAAsBC,KAAM,KAAMC,UAAWX,I,gBCH7Ce,EAA2BC,IAA3BD,MAAOE,EAAoBD,IAApBC,QAASC,EAAWF,IAAXE,OAChBC,EAAYC,IAAZD,QAoGOE,mBAjG0B,SAACC,GAChB5B,YAAW,WAEjCN,QAAQC,KAAK,aACZ,KAHH,IADkD,EAKtBkC,oBAAS,GALa,mBAK3CC,EAL2C,KAKhCC,EALgC,KAM9BC,EAAeJ,EAA3BK,SAAYD,SACpB,OACE,kBAAC,IAAD,CAAQE,MAAO,CAAEC,MAAO,OAAQC,OAAQ,SACtC,kBAACf,EAAD,CAAOgB,QAAS,KAAMC,aAAW,EAACR,UAAWA,GAC3C,yBAAKS,UAAU,SACf,kBAAC,IAAD,CAAMC,MAAM,OAAOC,KAAK,SAASC,oBAAqB,CAAC5B,EAAU,GAAGC,OA6BxE,oCACE,kBAACU,EAAD,CAASZ,ID5DQ,MC4DM8B,KAAM,kBAACC,EAAA,EAAD,MAAiBC,MAAM,kBAEhD/B,EAAUJ,KAAI,SAAAC,GACZ,OAAQ,kBAAC,IAAKmC,KAAN,CAAWjC,IAAKF,EAAKI,MAC3B,kBAAC,IAAD,CAAMgC,GAAIpC,EAAKI,MAAOJ,EAAKK,WAKnC,kBAACS,EAAD,CAASZ,IDpEW,SCoEM8B,KAAM,kBAACK,EAAA,EAAD,MAAiBH,MAAM,qBAEnD3B,EAAaR,KAAI,SAAAC,GACf,OAAQ,kBAAC,IAAKmC,KAAN,CAAWjC,IAAKF,EAAKI,MAC3B,kBAAC,IAAD,CAAMgC,GAAIpC,EAAKI,MAAOJ,EAAKK,WAKnC,kBAACS,EAAD,CAASZ,ID5ES,OC4EM8B,KAAM,kBAACM,EAAA,EAAD,MAAiBJ,MAAM,mBAEjD1B,EAAWT,KAAI,SAAAC,GACb,OAAQ,kBAAC,IAAKmC,KAAN,CAAWjC,IAAKF,EAAKI,MAC3B,kBAAC,IAAD,CAAMgC,GAAIpC,EAAKI,MAAOJ,EAAKK,WAKnC,kBAACS,EAAD,CAASZ,IDpFW,SCoFM8B,KAAM,kBAACM,EAAA,EAAD,MAAiBJ,MAAM,gBAEnDzB,EAAaV,KAAI,SAAAC,GACf,OAAQ,kBAAC,IAAKmC,KAAN,CAAWjC,IAAKF,EAAKI,MAC3B,kBAAC,IAAD,CAAMgC,GAAIpC,EAAKI,MAAOJ,EAAKK,YA3D9BkC,IAAMC,cAAcrB,EAAYsB,IAAqBC,IAAkB,CACtEd,UAAW,UACXhC,QAAS,WAAQwB,GAAQD,QAI/B,kBAAC,IAAD,CAAQS,UAAU,eAChB,kBAACf,EAAD,KACE,0BAAMU,MAAO,CAAEoB,MAAO,UAAtB,6BAAuC,0BAAMpB,MAAO,CAAEqB,OAAQ,WAAahD,QAAS,WAAQC,OAAOC,KAAP,UAAeL,GAAf,OAAwB4B,MAAgB5B,EAAQ4B,KAE9I,kBAACT,EAAD,CACEgB,UAAU,yBACVL,MAAO,CACLsB,OAAQ,YACRC,QAAS,GACTC,UAAW,MAuDnB,kBAAC,IAAD,KACG,sBACI5C,GADJ,YAEII,GAFJ,YAGIC,GAHJ,YAIIC,IACHV,KAAI,SAAAC,GACJ,OAAQ,kBAAC,IAAD,CAAOE,IAAKF,EAAKI,KAAMA,KAAMJ,EAAKI,KAAME,UAAWN,EAAKM,eAElE,kBAAC,IAAD,CAAU8B,GAAIjC,EAAU,GAAGC,KAAM4C,OAAK,EAACC,KAAK,YCvG9BC,QACW,cAA7BrD,OAAOyB,SAAS6B,UAEe,UAA7BtD,OAAOyB,SAAS6B,UAEhBtD,OAAOyB,SAAS6B,SAASC,MACvB,2DCRNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAgBC,OAAQC,KACtB,kBAAC,IAAD,KACE,kBAAC,EAAD,UAKRC,SAASC,eAAe,SD+GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpF,QAAQoF,MAAMA,EAAMC,c","file":"static/js/main.bbb6d2af.chunk.js","sourcesContent":["import React, { FunctionComponent } from \"react\";\nimport moment from \"moment\";\n\ninterface YPromiseProps {}\nlet count = 0;\n\n/**\n * promise 练习\n *\n * @class Promise\n * @extends {React.Component}\n */\nconst YPromise: FunctionComponent<YPromiseProps> = () => {\n  console.info(\"在YPromise方法里\");\n  return (\n    <>\n      {usePromise()}\n    </>\n  );\n}\n\n/** 使用Promise */\nconst usePromise = () =>  {\n    console.info(\"进入这个方法\");\n    const myPromise = new Promise((resolve, reject) => {\n    console.info(\"new 了一个\");\n    const timeoutInstance = setTimeout(() => {\n      // resolve(\"2秒后执行成功\");\n      console.info(moment().format(\"mm:ss\"));\n      console.info(\"2秒到了\");\n    }, 2000);\n    console.info(timeoutInstance);\n  });\n  // myPromise.then((res) => {\n  //   console.info(res, count++);\n  // })\n}\n\nexport default YPromise;","export const domain = \"https://github.com/yaxianglu/practice/blob/master/src/pages\";\n","import { Divider } from \"antd\";\nimport React, { FunctionComponent } from \"react\";\n\nimport { domain } from \"../../../config\";\n\nconst list = [\n  \"React.StrictMode模式下render里面setTimeout2次执行的问题（正常应该是1次）\",\n];\n\n/**\n * 开发遇到的一些问题\n *\n */\nconst QA: FunctionComponent = () => {\n  const showDetail =() => { window.open(`${domain}/other/qa/README.md`) };\n  return (\n    <div>\n      <h1>本页主要记录一些开发中遇到的问题和解决方法</h1>\n      <div>请点击查看： <button onClick={showDetail}>详情</button></div>\n      <Divider/>\n      {\n        list.map((item, index) => {\n          return <div key={item}>{index + 1}.{item}</div>\n        })\n      }\n    </div>\n  );\n}\n\nexport default QA;","import { RouterConfig } from \"../model/common\";\nimport Promise from \"../pages/es/promise\";\nimport QA from \"../pages/other/qa\";\n\nexport const ES_PATH = \"/es\";\nexport const REACT_PATH = \"/react\";\nexport const CSS_PATH = \"/css\";\nexport const OTHER_PATH = \"/other\";\n\nexport const es_config: RouterConfig[] = [\n  { path: `${ES_PATH}/promise`, name: \"promise\", component: Promise },\n];\n\nexport const react_config: RouterConfig[] = [\n  { path: `${REACT_PATH}/promise`, name: \"promise\", component: Promise },\n];\n\nexport const css_config: RouterConfig[] = [\n  { path: `${CSS_PATH}/promise`, name: \"promise\", component: Promise },\n];\n\nexport const other_config: RouterConfig[] = [\n  { path: `${OTHER_PATH}/qa`, name: \"qa\", component: QA },\n];\n","import React, { useState, FunctionComponent } from 'react';\nimport { Layout, Menu } from 'antd';\nimport {\n  MenuUnfoldOutlined,\n  MenuFoldOutlined,\n  FileOutlined,\n  TeamOutlined,\n  UserOutlined,\n} from '@ant-design/icons';\n\nimport './App.css';\nimport {\n  ES_PATH, es_config,\n  REACT_PATH, react_config,\n  CSS_PATH, css_config,\n  OTHER_PATH, other_config,\n} from \"../layout/router-config\";\nimport { Link, Route, withRouter, RouteComponentProps, Switch, Redirect } from \"react-router-dom\";\nimport { domain } from \"../config\";\nconst { Sider, Content, Header } = Layout;\nconst { SubMenu } = Menu;\ntype AppProps = RouteComponentProps;\n\nconst App: FunctionComponent<AppProps> = (props) => {\n  const timeoutInstance = setTimeout(() => {\n    // resolve(\"2秒后执行成功\");\n    console.info(\"3333333\");\n  }, 2000);\n  const [collapsed, toggle] = useState(false);\n  const { location: { pathname } } = props;\n  return (\n    <Layout style={{ width: \"100%\", height: \"100%\" }}>\n      <Sider trigger={null} collapsible collapsed={collapsed}>\n        <div className=\"logo\" />\n        <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={[es_config[0].path]}>\n          {renderMenuItem()}\n          {React.createElement(collapsed ? MenuUnfoldOutlined : MenuFoldOutlined, {\n            className: 'trigger',\n            onClick: () => { toggle(!collapsed) },\n          })}\n        </Menu>\n      </Sider>\n      <Layout className=\"site-layout\">\n        <Header>\n          <span style={{ color: \"white\" }}>代码地址: <span style={{ cursor: \"pointer\" }} onClick={() => { window.open(`${domain}${pathname}`) }}>{domain}{pathname}</span></span>\n        </Header>\n        <Content\n          className=\"site-layout-background\"\n          style={{\n            margin: '24px 16px',\n            padding: 24,\n            minHeight: 280,\n          }}\n        >\n          {renderContent()}\n        </Content>\n      </Layout>\n    </Layout>\n  );\n}\n\nfunction renderMenuItem() {\n  return (\n    <>\n      <SubMenu key={ES_PATH} icon={<FileOutlined/>} title=\"ES特性\">\n        {\n          es_config.map(item => {\n            return (<Menu.Item key={item.path}>\n              <Link to={item.path}>{item.name}</Link>\n            </Menu.Item>);\n          })\n        }\n      </SubMenu>\n      <SubMenu key={REACT_PATH} icon={<TeamOutlined/>} title=\"React特性\">\n        {\n          react_config.map(item => {\n            return (<Menu.Item key={item.path}>\n              <Link to={item.path}>{item.name}</Link>\n            </Menu.Item>);\n          })\n        }\n      </SubMenu>\n      <SubMenu key={CSS_PATH} icon={<UserOutlined/>} title=\"css特性\">\n        {\n          css_config.map(item => {\n            return (<Menu.Item key={item.path}>\n              <Link to={item.path}>{item.name}</Link>\n            </Menu.Item>);\n          })\n        }\n      </SubMenu>\n      <SubMenu key={OTHER_PATH} icon={<UserOutlined/>} title=\"其他\">\n        {\n          other_config.map(item => {\n            return (<Menu.Item key={item.path}>\n              <Link to={item.path}>{item.name}</Link>\n            </Menu.Item>);\n          })\n        }\n      </SubMenu>\n    </>\n  );\n}\n\nfunction renderContent() {\n  return (\n    <Switch>\n      {[\n        ...es_config,\n        ...react_config,\n        ...css_config,\n        ...other_config,\n      ].map(item => {\n        return (<Route key={item.path} path={item.path} component={item.component} />);\n      })}\n      <Redirect to={es_config[0].path} exact from=\"\"/>\n    </Switch>\n  );\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ConfigProvider } from \"antd\";\nimport zh_CN from \"antd/es/locale-provider/zh_CN\";\n\nimport './index.css';\nimport App from './layout/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <ConfigProvider locale={zh_CN}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </ConfigProvider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}